""" Trie boiler plate code generated by GitHub Copilot and verified by Alex Badia  """

class TrieNode:
  def __init__(self):
    self.children = {}
    self.is_end_of_word = False

class Trie:
  def __init__(self):
    self.root = TrieNode()

  def insert(self, words):
    node = self.root
    for word in words:
      if word not in node.children:
        node.children[word] = TrieNode()
      node = node.children[word]
    node.is_end_of_word = True

  def search(self, words):
    node = self.root
    for word in words:
      if word not in node.children:
        return False
      node = node.children[word]
    
    return node.is_end_of_word
  
  def count_paths(self, node=None):
    if node is None:
      node = self.root
    count = 1 if node.is_end_of_word else 0
    for child in node.children.values():
      count += self.count_paths(child)
    return count

  def print_trie(self, node=None, word=""):
    if node is None:
      node = self.root
    if node.is_end_of_word:
      print(word)
    for k, v in node.children.items():
      self.print_trie(v, word + " " + k)
  
  def pretty_print_trie(self, filename):
    with open(filename, 'w') as file:
      self._pretty_print_trie_helper(self.root, "", file)

  def _pretty_print_trie_helper(self, node, word, file):
    if node.is_end_of_word:
      file.write(word + '\n')
    for k, v in node.children.items():
      self._pretty_print_trie_helper(v, word + " " + str(k), file)
